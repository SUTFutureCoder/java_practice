<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis_practice.mappers.StudentMapper">

	<!--<resultMap id="StudentResult" type="Student">-->
		<!--&lt;!&ndash;定义主键，下面实体和字段名字一致&ndash;&gt;-->
		<!--<id property="id" column="id"/>-->
		<!--<result property="name" column="name"/>-->
		<!--<result property="age" column="age"/>-->
		<!--&lt;!&ndash;对象级联 注意写外键&ndash;&gt;-->
		<!--<result property="address.id" column="addressId"/>-->
		<!--<result property="address.sheng" column="sheng"/>-->
		<!--<result property="address.shi" column="shi"/>-->
		<!--<result property="address.qu" column="qu"/>-->
	<!--</resultMap>-->

	<!--<resultMap id="AddressResult" type="Address">-->
		<!--<result property="id" column="id"/>-->
		<!--<result property="sheng" column="sheng"/>-->
		<!--<result property="shi" column="shi"/>-->
		<!--<result property="qu" column="qu"/>-->
	<!--</resultMap>-->

	<!--<resultMap id="StudentResult" type="Student">-->
		<!--<id property="id" column="id"/>-->
		<!--<result property="name" column="name"/>-->
		<!--<result property="age" column="age"/>-->
		<!--&lt;!&ndash;<association property="address" resultMap="AddressResult"/>&ndash;&gt;-->
		<!--<association property="address" javaType="Address">-->
			<!--<result property="id" column="id"/>-->
			<!--<result property="sheng" column="sheng"/>-->
			<!--<result property="shi" column="shi"/>-->
			<!--<result property="qu" column="qu"/>-->
		<!--</association>-->
	<!--</resultMap>-->

	<resultMap id="StudentResult" type="Student">
		<!--定义主键，下面实体和字段名字一致-->
		<id property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="age" column="age"/>
		<!--自动把关联的外键值传过来-->
		<association property="address" column="addressId" select="com.mybatis_practice.mappers.AddressMapper.findById"/>
		<association property="grade" column="gradeId" select="com.mybatis_practice.mappers.GradeMapper.findById"/>
	</resultMap>

	<insert id="add" parameterType="Student">
		insert into t_student (id, name, age) values(null,#{name},#{age})
	</insert>

	<update id="update" parameterType="Student">
		update t_student set name=#{name}, age=#{age} where id=#{id}
	</update>

	<delete id="delete" parameterType="Integer">
		delete from t_student where id=#{id}
	</delete>

	<select id="findById" parameterType="Integer" resultType="Student">
		select * from t_student where id=#{id}
	</select>

	<select id="find" resultMap="StudentResult">
		select * from t_student
	</select>

	<select id="findStudentWithAddress" resultMap="StudentResult" parameterType="Integer">
		select * from t_student t1, t_address t2 where t1.addressId = t2.id and t1.id=#{id}
	</select>

	<select id="findByGradeId" resultMap="StudentResult" parameterType="Integer">
		select * from t_student where gradeId=#{gradeId}
	</select>


	<select id="searchStudents" parameterType="map" resultMap="StudentResult">
		select * from t_student
		where gradeId=#{gradeId}
		<if test="name != null">
			and name like #{name}
		</if>
		<if test="age != null">
			and age = #{age}
		</if>
	</select>

	<select id="searchStudents2" parameterType="map" resultMap="StudentResult">
		select * from t_student
		<choose>
			<when test="searchBy == 'gradeId'">
				where gradeId=#{gradeId}
			</when>
			<when test="searchBy == 'name'">
				where name like #{name}
			</when>
			<otherwise>
				where age = #{age}
			</otherwise>
		</choose>
	</select>

	<select id="searchStudents3" parameterType="map" resultMap="StudentResult">
		select * from t_student
		<where>
			<if test="gradeId != null">
				and gradeId=#{gradeId}
			</if>
			<if test="name != null">
				and name like #{name}
			</if>
			<if test="age != null">
				and age = #{age}
			</if>
		</where>
	</select>

	<select id="searchStudents4" parameterType="Map" resultMap="StudentResult">
		select * from t_student
		<trim prefix="where" prefixOverrides="and/or">
			<if test="gradeId != null">
				gradeId=#{gradeId}
			</if>
			<if test="name != null">
				and name like #{name}
			</if>
			<if test="age != null">
				and age = #{age}
			</if>
		</trim>
	</select>

	<select id="searchStudents5" parameterType="Map" resultMap="StudentResult">
		select * from t_student
		<if test="gradeIds != null">
			<where>
				gradeId in
				<foreach item="gradeId" collection="gradeIds" open="(" separator="," close=")">
					#{gradeId}
				</foreach>
			</where>
		</if>
	</select>

	<select id="searchStudents6" resultMap="StudentResult">
		select * from t_student where name like #{param1} and age=#{param2}
	</select>

	<update id="updateStudent" parameterType="Student">
		update t_student
		<set>
			<if test="name != null">
				name=#{name},
			</if>
			<if test="age != null">
				age=#{age},
			</if>
		</set>
		where id=#{id}
	</update>

	<select id="findStudents" resultMap="StudentResult">
		select * from t_student
	</select>

	<select id="findStudents2" resultMap="StudentResult" parameterType="Map">
		select * from t_student
		<if test="start != null and size != null">
			limit #{size} offset #{start}
		</if>
	</select>

</mapper> 